from openai import OpenAI
import telebot
import base64
import requests
from sympy import preview

# –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –ò–ò
model = "gpt-4-vision-preview"

# –û–∑–Ω–∞–∫–æ–º–º–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
welcome_message = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –ò–ò! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –æ–±—É—á–µ–Ω–∏–µ–º –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear

üìö **–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
- –ë—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ü–æ–º–æ—â–∏ –≤ —É—á–µ–±–µ –∏ —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
- –†–µ—à–µ–Ω–∏—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
- –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç base64x
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
bot = telebot.TeleBot("api_key", parse_mode="MarkdownV2")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ –ò–ò
api_key = "api_key"
client = OpenAI(api_key=api_key)

cyrillic_to_latin = {
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D',
        '–ï': 'E', '–Å': 'E', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I',
        '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N',
        '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T',
        '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch',
        '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '',
        '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
        '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i',
        '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
        '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
        '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch',
        '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '',
        '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è, —Å–æ—Å—Ç–æ—è—â–µ–≥–æ –∏–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –±–æ—Ç–æ–º
dialogs = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@bot.message_handler(commands=['clear'])
def clear_dialog(message):
    global dialogs
    dialogs[message.from_user.id] = []
    bot.reply_to(message, "–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω\!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç Telegram
def format_message(message):
    response = ""
    for i in range(len(message)):
        if message[i] in ['_', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'] and message[
            i - 1] != "\\":
            response += f"\{message[i]}"
        else:
            response += message[i]
    response = response.replace("**", "sljkgfnjekrghjserf")
    response = response.replace("*", "\*")
    response = response.replace("sljkgfnjekrghjserf", "*")
    return response


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.from_user.id, format_message(welcome_message))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def echo_all(message):
    global dialogs, model
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏, –∏–∑–æ–±—Ä–∞–∂–∞—é—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
    waiting = bot.send_sticker(message.from_user.id,
                               "CAACAgEAAxkBAAED12Rl4foXrjDjB89gE7OA-SIKP4i7BQACgAIAAqFjGUSrWD-iBcJN3DQE")
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥
    if message.from_user.id in dialogs:
        dialogs[message.from_user.id].append({"role": "user", "content": message.text})
    else:
        dialogs[message.from_user.id] = [{"role": "user", "content": message.text}]
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
    completion = client.chat.completions.create(
        model=model,
        messages=dialogs[message.from_user.id]
    )
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
    bot.delete_message(chat_id=message.chat.id, message_id=waiting.message_id)
    # –î–∞–ª–µ–µ –∏–¥—ë—Ç –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ LaTeX, –∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    # –¢. –∫. –≤ —Ç–≥ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã
    response1 = completion.choices[0].message.content
    obr = 0
    starts = [0]
    for i in range(len(response1) - 1):
        if response1[i] + response1[i + 1] == "\[":
            formula = "\["
            for j in range(i + 2, len(response1)):
                formula += response1[j]
                if formula[-2] + formula[-1] == "\]":
                    obr = j
                    starts.append(j + 1)
                    break
            piece = ""
            for x in range(starts[-2], i):
                piece += response1[x]
            if piece.replace("\n", "").replace(" ", "") != "":
                bot.send_message(message.from_user.id, format_message(piece))
            try:
                for d in cyrillic_to_latin:
                    formula = formula.replace(d, cyrillic_to_latin[d])
                preview(r'$$' + formula[2:][:-2] + '$$', viewer='file',
                        filename='formula.png',
                        euler=False,
                        dvioptions=["-D", "600"])
                with open('formula.png', 'rb') as photo:
                    bot.send_photo(message.from_user.id, photo)
            except:
                bot.send_message(message.from_user.id, format_message(formula))
    if obr == 0:
        response = format_message(response1)
    else:
        response = format_message(response1[obr + 1:])
    bot.send_message(message.from_user.id, response)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò –≤ –¥–∏–∞–ª–æ–≥
    dialogs[message.from_user.id].append({"role": "assistant", "content": response1})


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏, –∏–∑–æ–±—Ä–∞–∂–∞—é—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
    waiting = bot.send_sticker(message.from_user.id,
                               "CAACAgEAAxkBAAED12Rl4foXrjDjB89gE7OA-SIKP4i7BQACgAIAAqFjGUSrWD-iBcJN3DQE")
    # API –¢–µ–ª–µ–≥—Ä–∞–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–¥—ë—Ç –ø–æ
    # –≤–æ–∑–≤—Ä–∞—Å—Ç–∞–Ω–∏—é, –ø–æ—ç—Ç–æ–º—É –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ(–∏—Å—Ö–æ–¥–Ω–æ–º)
    file_id = message.photo[-1].file_id

    file_info = bot.get_file(file_id)

    downloaded_file = bot.download_file(file_info.file_path)

    with open("photo.jpg", 'wb') as new_file:
        new_file.write(downloaded_file)

    image_path = "photo.jpg"
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç base64, —Ç. –∫. —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏—Ö –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ–ª—å
    base64_image = encode_image(image_path)
    # –¢—É—Ç –∏–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –µ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    if message.from_user.id in dialogs:
        if message.caption is not None:
            dialogs[message.from_user.id].append({"role": "user", "content": [{"type": "text", "text": message.caption},
                                                                              {"type": "image_url", "image_url": {
                                                                                  "url": f"data:image/jpeg;base64,{base64_image}"
                                                                              }}]})
        else:
            dialogs[message.from_user.id].append({"role": "user", "content": [{"type": "image_url", "image_url": {
                "url": f"data:image/jpeg;base64,{base64_image}"
            }}]})
    else:
        if message.caption is not None:
            dialogs[message.from_user.id] = [{"role": "user", "content": [{"type": "text", "text": message.caption},
                                                                          {"type": "image_url", "image_url": {
                                                                              "url": f"data:image/jpeg;base64,{base64_image}"
                                                                          }}]}]
        else:
            dialogs[message.from_user.id] = [{"role": "user", "content": [{"type": "image_url", "image_url": {
                "url": f"data:image/jpeg;base64,{base64_image}"
            }}]}]
    payload = {
        "model": "gpt-4-vision-preview",
        "messages": dialogs[message.from_user.id],
        "max_tokens": 4096
    }
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
    response0 = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
    bot.delete_message(chat_id=message.chat.id, message_id=waiting.message_id)
    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò
    response1 = response0.json()['choices'][0]['message']['content']
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
    obr = 0
    starts = [0]
    for i in range(len(response1) - 1):
        if response1[i] + response1[i + 1] == "\[":
            formula = "\["
            for j in range(i + 2, len(response1)):
                formula += response1[j]
                if formula[-2] + formula[-1] == "\]":
                    obr = j
                    starts.append(j + 1)
                    break
            piece = ""
            for x in range(starts[-2], i):
                piece += response1[x]
            if piece.replace("\n", "").replace(" ", "") != "":
                bot.send_message(message.from_user.id, format_message(piece))
            try:
                for d in cyrillic_to_latin:
                    formula = formula.replace(d, cyrillic_to_latin[d])
                preview(r'$$' + formula[2:][:-2] + '$$', viewer='file',
                        filename='formula.png',
                        euler=False,
                        dvioptions=["-D", "600"])
                with open('formula.png', 'rb') as photo:
                    bot.send_photo(message.from_user.id, photo)
            except:
                bot.send_message(message.from_user.id, format_message(formula))
    if obr == 0:
        response = format_message(response1)
    else:
        response = format_message(response1[obr + 1:])
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.from_user.id, response)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò –≤ –¥–∏–∞–ª–æ–≥
    dialogs[message.from_user.id].append({"role": "assistant", "content": response1})


# –≠—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.infinity_polling()
